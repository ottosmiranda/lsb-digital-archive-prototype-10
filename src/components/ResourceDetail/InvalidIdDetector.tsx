
import { useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { idValidationService } from '@/services/idValidationService';
import { useToast } from '@/hooks/use-toast';

interface InvalidIdDetectorProps {
  onInvalidId?: (id: string, reason: string) => void;
}

const InvalidIdDetector = ({ onInvalidId }: InvalidIdDetectorProps) => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    if (!id) return;

    console.group('üîç INVALID ID DETECTOR');
    console.log('üìã Checking ID from URL:', id);

    const validation = idValidationService.validateId(id);
    console.log('üìã Validation result:', validation);

    if (!validation.isValid) {
      console.log('‚ùå INVALID ID DETECTED - Taking action');
      
      // ‚úÖ Rastrear origem do ID inv√°lido
      idValidationService.trackInvalidIdOrigin(id, 'URL_PARAMETER', {
        route: '/recurso/:id',
        currentUrl: window.location.href,
        referrer: document.referrer
      });

      // ‚úÖ Notificar callback se fornecido
      if (onInvalidId) {
        onInvalidId(id, validation.errorReason || 'ID inv√°lido');
      }

      // ‚úÖ Mostrar toast informativo
      toast({
        title: "ID de recurso inv√°lido",
        description: `O ID "${id.substring(0, 20)}..." n√£o corresponde a nenhum recurso v√°lido. Redirecionando para a busca.`,
        variant: "destructive",
      });

      // ‚úÖ Redirecionar para busca ap√≥s um breve delay
      setTimeout(() => {
        navigate('/buscar', { replace: true });
      }, 2000);

      console.groupEnd();
      return;
    }

    console.log('‚úÖ ID is valid, proceeding normally');
    console.groupEnd();
  }, [id, navigate, toast, onInvalidId]);

  // Este componente n√£o renderiza nada, apenas detecta IDs inv√°lidos
  return null;
};

export default InvalidIdDetector;
